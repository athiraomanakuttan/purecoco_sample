<%- include('./header') %> 
<%- include('./navbar') %>

<main class="h-full overflow-y-auto">
    <div class="container px-6 mx-auto grid">
    
      <div class="grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4 mt-5">
        <!-- Card -->
        
        <!-- Card -->
        <div
          class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800"
        >
          <div
            class="p-3 mr-4 text-green-500 bg-green-100 rounded-full dark:text-green-100 dark:bg-green-500"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z"
                clip-rule="evenodd"
              ></path>
            </svg>
          </div>
          <div>
            <p
              class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"
            >
              Total sales
            </p>
            <p
              class="text-lg font-semibold text-gray-700 dark:text-gray-200"
            >
            â‚¹ <%= totalPrice  %>
            </p>
          </div>
        </div>
        <!-- Card -->
        <div
          class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800"
        >
          <div
            class="p-3 mr-4 text-blue-500 bg-blue-100 rounded-full dark:text-blue-100 dark:bg-blue-500"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path
                d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"
              ></path>
            </svg>
          </div>
          <div>
            <p
              class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400"
            >
              Total sales Count
            </p>
            <p
              class="text-lg font-semibold text-gray-700 dark:text-gray-200"
            >
              <%= totalSales %>
            </p>
          </div>
        </div>
        <!-- Card -->
        
            
            
          </div>
        </div>
      </div>

<!-- ------------------------------------------------------------------------------------------------------------ -->
<div class="w-full overflow-hidden rounded-lg shadow-xs">
  
    <form  class="flex text-end justify-content-end m-4">
            
        <div id="sales customRange"  class="mr-3">
            <input type="date" id="startDate" name="startDate"  placeholder="Start Date" class="border p-1" onchange="getOrderData()">
            
            <input type="date" id="endDate" name="endDate"  placeholder="End Date" class="border p-1" onchange="getOrderData()">
        </div>
        <select name="salesreportType" id="salesreportType" onchange="getOrderData()" class="mr-5">
            <option value="">Full Report</option>
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option>
            <option value="weekly">Weekly</option>
            <option value="custom">Custom Range</option>
        </select>
        <select name="reportType" id="reportType" class="mr-5">
          <option value="PDF">PDF</option>
          <option value="EXCEL">EXCEL</option>
      </select>
        <button type="button" onclick="downloadReport()" id="download-btn" class="px-3 py-1 text-sm font-medium leading-5 text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-md active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple">Download Report</button>
    
        </form>
    <div class="w-full overflow-x-auto">
    <table class="w-full whitespace-no-wrap">
      <thead>
        <tr class="text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b dark:border-gray-700 bg-gray-50 dark:text-gray-400 dark:bg-gray-800">
          <th class="px-4 py-3 flexble">
            Order Id
            
          </th>
          <th class="px-4 py-3"> Customer </th>

          <th class="px-4 py-3">Quantity</th>

          <th class="px-4 py-3">
            <span>Amount</span>
          </th>
          <th class="px-4 py-3">
            <span>Payment</span>
          </th>
          <th class="px-4 py-3">
            <span>Coupon</span>
          </th>

          <th class="px-4 py-3 flexble">
            <span>Time</span>
          </th>
          <th class="px-4 py-3">Status</th>
          
        </tr>
      </thead>
      <tbody class="bg-white divide-y dark:divide-gray-700 dark:bg-gray-800" id="salesContent">
      </tbody>
    </table>
  </div>



  <!-- ------------------------ pagination div ---------------  -->
  <div class="grid px-4 py-3 text-xs font-semibold tracking-wide text-gray-500 uppercase border-t dark:border-gray-700 bg-gray-50 sm:grid-cols-9 dark:text-gray-400 dark:bg-gray-800">
    <span class="flex items-center col-span-3"></span>
    <span class="col-span-2"></span>
    <!-- Pagination -->

    <span class="flex col-span-4 mt-2 sm:mt-auto sm:justify-end">
      <nav aria-label="Table navigation">
        <ul class="inline-flex items-center">
          <li>
            <button class="px-3 py-1 rounded-md rounded-l-lg focus:outline-none focus:shadow-outline-purple" aria-label="Previous">
              <svg aria-hidden="true" class="w-4 h-4 fill-current" viewBox="0 0 20 20">
                <path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" fill-rule="evenodd"></path>
              </svg>
            </button>
          </li>
          <li>
            <button class="px-3 py-1 rounded-md focus:outline-none focus:shadow-outline-purple">
              1
            </button>
          </li>
          <li>
            <button class="px-3 py-1 rounded-md focus:outline-none focus:shadow-outline-purple">
              2
            </button>
          </li>
          <li>
            <button class="px-3 py-1 text-white transition-colors duration-150 bg-purple-600 border border-r-0 border-purple-600 rounded-md focus:outline-none focus:shadow-outline-purple">
              3
            </button>
          </li>
          <li>
            <button class="px-3 py-1 rounded-md focus:outline-none focus:shadow-outline-purple">
              4
            </button>
          </li>
          <li>
            <span class="px-3 py-1">...</span>
          </li>
          <li>
            <button class="px-3 py-1 rounded-md focus:outline-none focus:shadow-outline-purple">
              8
            </button>
          </li>
          <li>
            <button class="px-3 py-1 rounded-md focus:outline-none focus:shadow-outline-purple">
              9
            </button>
          </li>
          <li>
            <button class="px-3 py-1 rounded-md rounded-r-lg focus:outline-none focus:shadow-outline-purple" aria-label="Next">
              <svg class="w-4 h-4 fill-current" aria-hidden="true" viewBox="0 0 20 20">
                <path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" fill-rule="evenodd"></path>
              </svg>
            </button>
          </li>
        </ul>
      </nav>
    </span>
  </div>
</div>
 
<!-- ------------------------ ---------------------------- ---------------  -->


      <!-- Charts -->
      <h2
        class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200 text-center"
      >
       
      </h2>
      
      <div class="grid gap-6 mb-8 m-5">
      <div class="min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 m-3">
        <h4 class="mb-4 font-semibold text-gray-800 dark:text-gray-300">
          Sales by Month
        </h4>
        <form action="/generate_report" method="POST" class="flex text-end justify-content-end mb-5">
            
            <div id="customRange" style="display: none;" class="mr-3">
                <input type="date" id="startDate" name="startDate"  placeholder="Start Date" class="border p-1">
                
                <input type="date" id="endDate" name="endDate"  placeholder="End Date" class="border p-1">
            </div>
            <select name="reportType" id="reportType"  >
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
                <option value="weekly">Weekly</option>
            </select>
        </form>
        <canvas id="bars"></canvas>
        <div id="legend" class="flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400"></div>
      </div>
    </div>
    <div class="grid gap-6 mb-8 m-5">
        <div class="min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
          <h4 class="mb-4 font-semibold text-gray-800 dark:text-gray-300 m-3">
            Revenue
          </h4>
          <canvas id="piee"></canvas>
          <div id="legend" class="flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400"></div>
        </div>
        
        
      </div>
    </div>
  </main>


  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

  <script>
     async function fetchData() {
      try {
        const response = await fetch('/admin/getreport', {
          method: 'GET'
        });
        const data = await response.json();
        const labels = data.map(item => item._id);
        const revenue = data.map(item => item.totalRevenue);
        renderPieChart(labels, revenue);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    }

    function renderPieChart(labels, data) {
      const ctx = document.getElementById('piee').getContext('2d');
      new Chart(ctx, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: ['#1E3A8A', '#14B8A6', '#7C3AED','#5fcd6d','red'] 
          }]
        }
      });

      
      const legendContainer = document.getElementById('legend');
      legendContainer.innerHTML = ''; 
      labels.forEach((label, index) => {
        const color = ['#0e9f6e','#1E3A8A', '#14B8A6', '#7C3AED'][index];
        const legendItem = document.createElement('div');
        legendItem.classList.add('flex', 'items-center');
        legendItem.innerHTML = `<span class="inline-block w-3 h-3 mr-1" style="background-color: ${color}"></span><span>${label}</span>`;
        legendContainer.appendChild(legendItem);
      });
    }

   

    async function fetchSalesData() {
      try {
        const response = await fetch('/admin/getsalesbymonth', {
          method: 'GET'
        });
        const data = await response.json();

        // Prepare the data for the bar chart
        const months = [
          'Jan', 'Feb', 'Mar', 'Apr', 'May', 'June',
          'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
        ];
        const salesData = Array(12).fill(0);
        const countData = Array(12).fill(0);

        data.forEach(item => {
          salesData[item._id.month - 1] = item.totalSales;
          countData[item._id.month - 1] = item.count;
        });

        renderBarChart(months, salesData, countData);
      } catch (error) {
        console.error('Error fetching sales data:', error);
      }
    }

    function renderBarChart(labels, salesData, countData) {
      const ctx = document.getElementById('bars').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Sales Amount',
              data: salesData,
              backgroundColor: '#1E3A8A' // Customize color as needed
            },
            {
              label: 'Count of Purchases',
              data: countData,
              backgroundColor: '#14B8A6' // Customize color as needed
            }
          ]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }
        


    document.getElementById('reportType').addEventListener('change',async (e)=>{
        const reportRange =document.getElementById('reportType').value;
        if(reportRange === 'yearly')
        {
          fetchSalesData()
        }
        else
        {
          
        }
    })

    async function getOrderData() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const salesreportType = document.getElementById('salesreportType').value;

    try {
        const response = await fetch('/admin/fetch-sales-data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                salesreportType: salesreportType,
                startDate: startDate,
                endDate: endDate
            })
        });

        if (response.redirected) {
            window.location.href = response.url;
            return;
        }

        if (!response.ok) {
            // If response is not ok, log the status and throw an error
            console.error('Server responded with:', response.status, response.statusText);
            throw new Error('Failed to fetch order data');
        }

        const orderDetails = await response.json();

        let content = ``;
        if (orderDetails.length === 0) {
            content += `
                <tr>
                    <td colspan="8">
                        <h1 class="text-center">No data found</h1>
                    </td>
                </tr>
            `;
        } else {
            orderDetails.forEach((data) => {
                const formattedDate = dateFormat(data.createdAt);
                content += `
                    <tr class="text-gray-700 dark:text-gray-400">
                        <td class="px-4 py-3">
                            <div class="flex items-center text-sm">
                                <div>
                                    <p class="font-semibold">#${data.order_id}</p>
                                </div>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-sm">${data.address.customer_name}</td>
                        <td class="px-4 py-3 text-sm">${data.totalQuantity}</td>
                        <td class="px-4 py-3 text-sm">${data.totalPrice}</td>
                        <td class="px-4 py-3 text-sm">${data.paymentMethod}</td>
                        <td class="px-4 py-3 text-sm">
                            ${data.coupen_data.length > 0 ? data.coupen_data[0].coupen_name : 'No Coupon'}
                        </td>
                        <td class="px-4 py-3 text-sm">${formattedDate}</td>
                        <td class="px-4 py-3 text-sm">
                            ${getStatusBadge(data.orderStatus)}
                        </td>
                    </tr>
                `;
            });
        }
        
        document.getElementById('salesContent').innerHTML = content;
    } catch (error) {
        console.error('Error fetching order data:', error);
        document.getElementById('salesContent').innerHTML = `<tr>
                <td colspan="8">
                    <h1 class="text-center text-danger">Failed to fetch order data. Please try again later.</h1>
                </td>
            </tr>
        `;
    }
}



function getStatusBadge(status) {
    switch (status) {
        case 'Pending':
            return `<h2 class="text-warning">${status}</h2>`;
        case 'Confirmed':
        case 'Delivered':
            return `<h6 class="text-success">${status}</h6>`;
        case 'Returned':
            return `<h6 class="text-dark">${status}</h6>`;
        case 'Cancelled':
            return `<h6 class="text-danger">${status}</h6>`;
        case 'Shipped':
            return `<h6 class="text-info">${status}</h6>`;
        default:
            return status;
    }
}


async function downloadReport() {
    let startDate, endDate;
    const salesreportType = document.getElementById('salesreportType').value;
    const reportType = document.getElementById('reportType').value;

    if (salesreportType === 'custom') {
        startDate = document.getElementById('startDate').value;
        endDate = document.getElementById('endDate').value;
        if (startDate !== "") startDate = new Date(startDate);
        if (endDate !== "") endDate = new Date(endDate);
        startDate.setHours(0, 0, 0, 0);
        endDate.setHours(23, 59, 59, 999)
    } else {
        const currentDate = new Date();
        if (salesreportType === 'monthly') {
            startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        } else if (salesreportType === 'weekly') {
            const dayOfWeek = currentDate.getDay();
            startDate = new Date(currentDate);
            startDate.setDate(currentDate.getDate() - dayOfWeek);
            startDate.setHours(0, 0, 0, 0);
        } else if (salesreportType === 'yearly') {
            startDate = new Date(currentDate.getFullYear(), 0, 1);
        }
        endDate = currentDate;
    }

    fetch('/admin/downloadPDF', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ salesreportType, startDate, endDate,reportType })
    })
    .then(response => response.blob())
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download =  reportType === 'PDF' ? 'sales_report.pdf' : 'sales_report.csv';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    })
    .catch(error => console.error('Error downloading report:', error));
}


    fetchData();
    fetchSalesData();
     getOrderData();

  </script>