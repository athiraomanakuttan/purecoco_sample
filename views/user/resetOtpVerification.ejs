<%- include('../layout/header') %>
<%- include('../layout/navBar') %>

<!-- Start Hero Section -->

<% if(actionResponce.status )
{
  %>
  <script>  notificationMessage("<%= actionResponce.message %>"); </script>
  <%
} else if(!actionResponce.status){
  %>
  <script>  errorNotification("<%= actionResponce.message %>") </script>
  <%
}
%>
  

<div class="hero">
  <div class="container">
    <div class="row justify-content-between">
      <div class="col-lg-4 offset-4">
        <div class="form-container">
          <form method="post" action="/otp-verification-password">
            
            <div class="form-group mb-1">
              <label class="text-black" for="email">OTP</label>
              <input type="text" class="form-control" name="userOTP" required/>
            </div>
            <p id="countdown" class="text-dark text-end mr-2"></p>


            <button
              type="submit"
              class="btn btn-primary-hover-outline mx-auto mb-4 w-100"
            >
             Verify
            </button>
            
          </form>
          <p class="text-dark">Not Received any OTP ? <a href="/resendOTP" class="primary">Resend OTP</a></p>
        </div>
      </div>
      
    </div>
  </div>
</div>
<script>
        document.addEventListener("DOMContentLoaded", function() {
            const otpGenerationTime = "<%= otpGenerationTime %>"; // Time when OTP was generated
            const otpValidityDuration = 2 * 60 * 1000; // OTP validity duration in milliseconds (2 minutes)

            const countdownElement = document.getElementById('countdown');
            let countdownTimeout;

            const refreshCountdown = () => {
                const currentTime = Date.now();
                const elapsed = currentTime - otpGenerationTime;
                const remainingTime = otpValidityDuration - elapsed;

                if (remainingTime <= 0) {
                    countdownElement.innerHTML = "OTP has expired";
                    clearTimeout(countdownTimeout);Swal.fire({
                        title: "Timer expired",
                        text: "Do you want to resend the OTP?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, resend it!"
                    }).then((result) => {

                        // if user confirm to resend the otp then using fetch resend the otp
                        if (result.isConfirmed) {
                            console.log(otpEmail.innerHTML);

                            const URL = `/resendPasswordOTP`
                            fetch(URL, {
                                method: "GET"
                            }).then((response) => {
                                if (response.ok) {
                                    Swal.fire({
                                        icon: "success",
                                        title: "OTP Sended successfully"
                                    }).then(()=>{
                                        window.location.reload()
                                    })
                                } else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Oops...",
                                        text: "Something went wrong!",
                                    }).then(() => {
                                        window.location = "/signup"
                                    })
                                }
                            })
                        }

                        // if the user cancel the otp resend request then redirect to signup page
                        if (result.isDismissed) {
                            window.location = "/signup"
                        }
                    });
                } else {
                    const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);
                    countdownElement.innerHTML = `${minutes}m ${seconds}s`;

                    // Update the countdown every second
                    countdownTimeout = setTimeout(refreshCountdown, 1000);
                }
            };

            refreshCountdown();
        });
    </script>